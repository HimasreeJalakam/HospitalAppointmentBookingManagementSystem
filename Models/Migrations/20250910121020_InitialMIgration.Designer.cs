// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.Data;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250910121020_InitialMIgration")]
    partial class InitialMIgration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<string>("IsDeleted")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TimeSlotId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TimeSlotID");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__8ECDFCA2C32C1BA5");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("Models.Models.Doctor", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Speciality")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("YearsOfReg")
                        .HasColumnType("int");

                    b.HasKey("PersonId")
                        .HasName("PK__Doctor__AA2FFB85B73EBE0D");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("Models.Models.DoctorTimeSlotMapping", b =>
                {
                    b.Property<int>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MappingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MappingId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("TimeSlotId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TimeSlotID");

                    b.HasKey("MappingId")
                        .HasName("PK__DoctorTi__8B5781BDA9090B16");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("DoctorTimeSlotMapping", (string)null);
                });

            modelBuilder.Entity("Models.Models.MedicalHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Dtype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DType");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<byte[]>("Records")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Tid")
                        .HasColumnType("int")
                        .HasColumnName("TId");

                    b.HasKey("HistoryId")
                        .HasName("PK__MedicalH__4D7B4ADDAADCB26E");

                    b.HasIndex("PatientId");

                    b.HasIndex("Tid");

                    b.ToTable("MedicalHistory", (string)null);
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32C5C3E4B7");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("AltNo")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("IsLogged")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("PhoneNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("PersonId")
                        .HasName("PK__Person__AA2FFB8585A481E5");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Models.Models.TimeSlot", b =>
                {
                    b.Property<string>("TimeSlotId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TimeSlotID");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("TimeSlotId")
                        .HasName("PK__TimeSlot__41CC1F523BDF29CF");

                    b.ToTable("TimeSlot", (string)null);
                });

            modelBuilder.Entity("Models.Models.TreatmentDone", b =>
                {
                    b.Property<int>("Tid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tid"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<string>("Dtype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DType");

                    b.Property<DateTime?>("FollowUp")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Prescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Tid")
                        .HasName("PK__Treatmen__C456D749F8D54564");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Treatment_Done", (string)null);
                });

            modelBuilder.Entity("Models.Models.Appointment", b =>
                {
                    b.HasOne("Models.Models.Person", "Doctor")
                        .WithMany("AppointmentDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Docto__4D94879B");

                    b.HasOne("Models.Models.Person", "Patient")
                        .WithMany("AppointmentPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Patie__4E88ABD4");

                    b.HasOne("Models.Models.TimeSlot", "TimeSlot")
                        .WithMany("Appointments")
                        .HasForeignKey("TimeSlotId")
                        .HasConstraintName("FK__Appointme__TimeS__4F7CD00D");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Models.Models.Doctor", b =>
                {
                    b.HasOne("Models.Models.Person", "Person")
                        .WithOne("Doctor")
                        .HasForeignKey("Models.Models.Doctor", "PersonId")
                        .IsRequired()
                        .HasConstraintName("FK__Doctor__PersonID__403A8C7D");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Models.DoctorTimeSlotMapping", b =>
                {
                    b.HasOne("Models.Models.Doctor", "Doctor")
                        .WithMany("DoctorTimeSlotMappings")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__DoctorTim__Docto__797309D9");

                    b.HasOne("Models.Models.TimeSlot", "TimeSlot")
                        .WithMany("DoctorTimeSlotMappings")
                        .HasForeignKey("TimeSlotId")
                        .HasConstraintName("FK__DoctorTim__TimeS__7A672E12");

                    b.Navigation("Doctor");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Models.Models.MedicalHistory", b =>
                {
                    b.HasOne("Models.Models.Person", "Patient")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__MedicalHi__Patie__7D439ABD");

                    b.HasOne("Models.Models.TreatmentDone", "TidNavigation")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("Tid")
                        .IsRequired()
                        .HasConstraintName("FK__MedicalHist__TId__7E37BEF6");

                    b.Navigation("Patient");

                    b.Navigation("TidNavigation");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.HasOne("Models.Models.Appointment", "Appointment")
                        .WithMany("Notifications")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__Notificat__Appoi__5441852A");

                    b.HasOne("Models.Models.Person", "Doctor")
                        .WithMany("NotificationDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__Docto__52593CB8");

                    b.HasOne("Models.Models.Person", "Patient")
                        .WithMany("NotificationPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__Patie__534D60F1");

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Models.Models.TreatmentDone", b =>
                {
                    b.HasOne("Models.Models.Person", "Doctor")
                        .WithMany("TreatmentDoneDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__Treatment__Docto__6383C8BA");

                    b.HasOne("Models.Models.Person", "Patient")
                        .WithMany("TreatmentDonePatients")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__Treatment__Patie__6477ECF3");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Models.Models.Appointment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Models.Models.Doctor", b =>
                {
                    b.Navigation("DoctorTimeSlotMappings");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.Navigation("AppointmentDoctors");

                    b.Navigation("AppointmentPatients");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalHistories");

                    b.Navigation("NotificationDoctors");

                    b.Navigation("NotificationPatients");

                    b.Navigation("TreatmentDoneDoctors");

                    b.Navigation("TreatmentDonePatients");
                });

            modelBuilder.Entity("Models.Models.TimeSlot", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorTimeSlotMappings");
                });

            modelBuilder.Entity("Models.Models.TreatmentDone", b =>
                {
                    b.Navigation("MedicalHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
